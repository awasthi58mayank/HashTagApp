//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HTCDataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ResultString : DbContext
    {
        public ResultString()
            : base("name=ResultString")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Menu_H> Menu_H { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public object Customer { get; internal set; }

        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int uspInsertCustomer(string customer_Name, string customer_Contact, string area_of_Residence, Nullable<int> total_number_of_visits)
        {
            var customer_NameParameter = customer_Name != null ?
                new ObjectParameter("Customer_Name", customer_Name) :
                new ObjectParameter("Customer_Name", typeof(string));
    
            var customer_ContactParameter = customer_Contact != null ?
                new ObjectParameter("Customer_Contact", customer_Contact) :
                new ObjectParameter("Customer_Contact", typeof(string));
    
            var area_of_ResidenceParameter = area_of_Residence != null ?
                new ObjectParameter("Area_of_Residence", area_of_Residence) :
                new ObjectParameter("Area_of_Residence", typeof(string));
    
            var total_number_of_visitsParameter = total_number_of_visits.HasValue ?
                new ObjectParameter("Total_number_of_visits", total_number_of_visits) :
                new ObjectParameter("Total_number_of_visits", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCustomer", customer_NameParameter, customer_ContactParameter, area_of_ResidenceParameter, total_number_of_visitsParameter);
        }
    
        public virtual int uspInsertMenu(string item, string itemDescription, Nullable<int> itemTax, Nullable<int> itemPrice, Nullable<int> itemDiscount)
        {
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var itemTaxParameter = itemTax.HasValue ?
                new ObjectParameter("ItemTax", itemTax) :
                new ObjectParameter("ItemTax", typeof(int));
    
            var itemPriceParameter = itemPrice.HasValue ?
                new ObjectParameter("ItemPrice", itemPrice) :
                new ObjectParameter("ItemPrice", typeof(int));
    
            var itemDiscountParameter = itemDiscount.HasValue ?
                new ObjectParameter("ItemDiscount", itemDiscount) :
                new ObjectParameter("ItemDiscount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertMenu", itemParameter, itemDescriptionParameter, itemTaxParameter, itemPriceParameter, itemDiscountParameter);
        }
    
        public virtual int uspInsertMenu_h(string name, string itemDes, Nullable<int> itemTax, Nullable<int> itemPrice, Nullable<int> itemDiscount)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDesParameter = itemDes != null ?
                new ObjectParameter("ItemDes", itemDes) :
                new ObjectParameter("ItemDes", typeof(string));
    
            var itemTaxParameter = itemTax.HasValue ?
                new ObjectParameter("ItemTax", itemTax) :
                new ObjectParameter("ItemTax", typeof(int));
    
            var itemPriceParameter = itemPrice.HasValue ?
                new ObjectParameter("ItemPrice", itemPrice) :
                new ObjectParameter("ItemPrice", typeof(int));
    
            var itemDiscountParameter = itemDiscount.HasValue ?
                new ObjectParameter("ItemDiscount", itemDiscount) :
                new ObjectParameter("ItemDiscount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertMenu_h", nameParameter, itemDesParameter, itemTaxParameter, itemPriceParameter, itemDiscountParameter);
        }
    
        public virtual int uspUpdateMenu(string item, Nullable<int> itemTax, Nullable<int> itemDiscount)
        {
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            var itemTaxParameter = itemTax.HasValue ?
                new ObjectParameter("ItemTax", itemTax) :
                new ObjectParameter("ItemTax", typeof(int));
    
            var itemDiscountParameter = itemDiscount.HasValue ?
                new ObjectParameter("ItemDiscount", itemDiscount) :
                new ObjectParameter("ItemDiscount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMenu", itemParameter, itemTaxParameter, itemDiscountParameter);
        }
    
        public virtual int uspUpdateMenu_H(string iName, Nullable<int> itax, Nullable<double> iDisc)
        {
            var iNameParameter = iName != null ?
                new ObjectParameter("IName", iName) :
                new ObjectParameter("IName", typeof(string));
    
            var itaxParameter = itax.HasValue ?
                new ObjectParameter("Itax", itax) :
                new ObjectParameter("Itax", typeof(int));
    
            var iDiscParameter = iDisc.HasValue ?
                new ObjectParameter("IDisc", iDisc) :
                new ObjectParameter("IDisc", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMenu_H", iNameParameter, itaxParameter, iDiscParameter);
        }
    }
}
